% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/API.R
\name{runProject}
\alias{runProject}
\title{Run all models of a StoX project}
\usage{
runProject(
  projectPath,
  modelNames = getRstoxFrameworkDefinitions("stoxModelNames"),
  processes = NULL,
  startProcess = 1,
  endProcess = Inf,
  drop.datatype = TRUE,
  unlistDepth2 = FALSE,
  run = TRUE,
  save = TRUE,
  force.save = FALSE,
  force.restart = FALSE,
  replaceDataList = list(),
  replaceArgsList = list(),
  prependProcessList = list(),
  fileOutput = NULL,
  setUseProcessDataToTRUE = TRUE,
  purge.processData = FALSE,
  returnModelData = TRUE,
  returnBootstrapData = FALSE,
  selection = list(),
  BootstrapID = NA,
  unlistSingleTable = FALSE,
  try = TRUE,
  close = FALSE,
  unlist.models = TRUE,
  msg = TRUE,
  ...
)
}
\arguments{
\item{projectPath}{The path to the StoX project, i.e., the folder of the project with the sub folders "input", "output" and "process". Can possibly be the path to a file inside the project folder.}

\item{modelNames}{The name of the models (possible values are "baseline", "analysis" and "report").}

\item{processes}{The name of the processes.}

\item{startProcess}{The process index, name or ID at which to start the model run. A list can be given named by the models if one needs to specify start process for each model. Models given inn \code{modelNames} but not in the list will be run from the start of the model.}

\item{endProcess}{The process index, name or ID at which to stop the model run. A list can be given named by the models if one needs to specify end process for each model. Models given inn \code{modelNames} but not in the list will be run to the end of the model.}

\item{drop.datatype}{Logical: If TRUE, drop the top level of the output list if it has length 1 and that single element is named by the datatype name.}

\item{unlistDepth2}{Logical: Related to \code{drop.datatype}, but setting this to TRUE unlists output data that are nested in 2 levels, such as output from \code{\link[RstoxData]{ReadBiotic}}, which outputs a set of tables for each input file. Using unlistDepth2 = TRUE puts all these tables in one list, and uses the concatenation of the file names and the table name separated by underscore. This is how it is displayed in the StoX GUI when selecting "View output".}

\item{run}{Logical: If TRUE run the model.}

\item{save}{Logical: If TRUE save the project before closing. Default (NULL) is to ask the user whether to save the project before closing.}

\item{force.save}{If no changes are made to the project, force save anyway. Overrides the \code{save} option.}

\item{force.restart}{Logical: If TRUE, start the processes even if the status file indicating that the model is being run exists. This is useuful when something crached in a preivous run, in which case the model is still appearing as running.}

\item{replaceDataList}{A list named by the processes to replace output data for. See \code{\link{runProcess}}.}

\item{replaceArgsList}{A list of \code{replaceArgs} (see \code{\link{runProcess}}) holding parameters to replace in the function call, named by the processes to modify.}

\item{prependProcessList}{A list of \code{values} used in \code{\link{prependProcess}}, named by the processes to prepend a process to.}

\item{fileOutput}{Logical: If TRUE save the output as a text file (or other format specified by the class or attributes of the output). If NULL (defafult) use the corresponding parameter of the process.}

\item{setUseProcessDataToTRUE}{Logical: If TRUE set the UseProcessData function parameter to TRUE in the process memory after execution, if the process is a ProcessData process.}

\item{purge.processData}{Logical: If TRUE replace process data entirely.}

\item{returnModelData}{Logical: If TRUE return the output of the model runs. Can also be given as a string vector holding the names of the models to return data from. If TRUE, the specific models to return data from (across models) can be given by \code{processes}.}

\item{returnBootstrapData}{Logical: If TRUE read the content of bootstrap NetCDF4 file.}

\item{selection}{Hierarchical list of names of the groups/variables. The last element must be a vector of the variables to return from the table specified by the other elements. E.g., list("ImputeSuperIndividuals", "SuperIndividualsData", c("Stratum", "IndividualAge", "Abundance")) will return a data.table of the three columns "Stratum", "IndividualAge" and "Abundance", added the BootstrapID specified in \code{BootstrapID}.}

\item{BootstrapID}{A sequence of bootstrap IDs, i.e., the indices of the bootstrap replicates. The default returns all bootstrap replicates.}

\item{unlistSingleTable}{Logical: For use when only single table process outputs are among the requested processes in \code{OutputProcesses} of \code{\link{Bootstrap}}. If FALSE (default) return a list named by the \code{selection} with a sub-list named by the datatype holding the output data  (e.g. $ImputeSuperIndividuals$SuperIndividualsData). If TRUE return a list named by the \code{selection} holding the output data, replicating the output of \code{\link{Bootstrap}} in StoX <= 3.6.2.}

\item{try}{Logical: If FALSE do not run the process in a \code{tryCatch}. Set this to FALSE when debugging, as the \code{tryCatch} masks the errors in the \code{traceback}.}

\item{close}{Logical: (In \code{copyProject}) If TRUE, close the project before copying.}

\item{unlist.models}{Logical: If TRUE unlist the top level so that all processes are in one list.}

\item{msg}{Logical: If FALSE no messages are printed to console (except possibly for extremely important ones).}

\item{...}{\code{replaceArgsList} can also be given directly.}
}
\value{
A list of model output.
}
\description{
This function runs and returns output from all models of a StoX project.
}
